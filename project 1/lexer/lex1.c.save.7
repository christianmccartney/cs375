
/* lex1.c         14 Feb 01; 31 May 12       */

/* This file contains code stubs for the lexical analyzer.
   Rename this file to be lexanc.c and fill in the stubs.    */

/* Copyright (c) 2001 Gordon S. Novak Jr. and
   The University of Texas at Austin. */

/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "token.h"
#include "lexan.h"
#include <math.h>

char *operator[] = {" ", "+", "-", "*", "/", ":=", "=", "<>", "<", "<=", ">=", ">", "^", ".", "and", "or", "not", "div", "mod", "in"};
char *delimiter[] = {" ", ",", ";", ":", "(", ")", "[", "]", ".."};
char *reserved[] = {" ","array", "begin", "case", "const", "do",
			"downto", "else", "end", "file", "for",
			"function", "goto", "if", "label", "nil",
			"of", "packed", "procedure", "program", "record",
 			"repeat", "set", "then", "to", "type",
			"until", "var", "while", "with" };


/* This file will work as given with an input file consisting only
   of integers separated by blanks:
   make lex1
   lex1
   12345 123    345  357
   */

/* Skip blanks and whitespace.  Expand this function to skip comments too. */
void skipblanks () {
     	int c;
      	while ((c = peekchar()) != EOF && (c == ' ' || c == '\n' || c == '\t'
			|| c == '{' || ( c == '(' && peek2char() == '*') )) {

		if(peekchar() == '{') {
			while(peekchar() != '}') {
				getchar();
			}
		}
		if(peekchar() == '(' && peek2char() == '*') {
			getchar();
			getchar();
			while(peekchar() != '*' && peek2char() != ')') {
				getchar();
			}
			getchar();
			getchar();
		}
		getchar();
	}
}

/* Get identifiers and reserved words */
TOKEN identifier (TOKEN tok) {
	char string[16];
	char c = peekchar();
	int i = 0;
	while(CHARCLASS[c] == ALPHA || CHARCLASS[c] == NUMERIC) {
		c = getchar();
		if(i < 15) {
			string[i] = c;
			i++;
		}
		c = peekchar();
	}
	string[i] = 0;
	string[15] = 0;
	strcpy(tok->stringval, string);
	tok->tokentype = IDENTIFIERTOK;
	tok->datatype = STRINGTYPE;

	i = 1;
	for(; i < 30; i++) {
		if(strcmp(reserved[i], string) == 0) {
			tok->tokentype = RESERVED;
			tok->whichval = i;
		}
	}

	i = 0;
	for(; i < 20; i++) {
		if(strcmp(operator[i], string) == 0) {
			tok->tokentype = OPERATOR;
			tok->whichval = i;
		}
	}
}

TOKEN getstring (TOKEN tok) {
	char string[16];
	int i = 0, j = 1;
	int c;
	getchar();

	while(j) {
		c = getchar();
		if(peekchar() == '\'') {
			if(peek2char() != '\'') {
				getchar();
				if(i < 15) {
					string[i] = c;
					string[i+1] = 0;
				}
				j = 0;
			} else {
				string[i] = c;
				i++;
				getchar();
			}
		} else if(i < 15) {
			string[i] = c;
			i++;
		}
		string[15] = 0;
	}

	strcpy(tok->stringval, string);
	tok->tokentype = STRINGTOK;
	tok->datatype = STRINGTYPE;
}

TOKEN special (TOKEN tok){
	char string[3];
	int c;

	if((c = peekchar()) != ':' && c != '<' && c != '>' && c != '.') {
		c = getchar();
		string[0] = c;
		string[1] = 0;
	} else {
		c = getchar();
		int c2 = peekchar();
		if(c2 != '>' && c2 != '=' && c2 != '.') {
			string[0] = c;
			string[1] = 0;
		} else {
			c2 = getchar();
			string[0] = c;
			string[1] = c2;
			string[2] = 0;
		}
	}

	int i = 0;
	for(; i < 9; i++) {
		if(strcmp(delimiter[i], string) == 0) {
			strcpy(tok->stringval, string);
			tok->tokentype = DELIMITER;
			tok->datatype = STRINGTYPE;
			tok->whichval = i;
		}
	}

	i = 0;
	for(; i < 20; i++) {
		if(strcmp(operator[i], string) == 0) {
			strcpy(tok->stringval, string);
			tok->tokentype = OPERATOR;
			tok->datatype = STRINGTYPE;
			tok->whichval = i;
		}
	}

}


/* Get and convert unsigned numbers of all types. */
TOKEN number (TOKEN tok) {

	long num;
	int  c, charval;
	num = 0;
	while ( (c = peekchar()) != EOF	&& CHARCLASS[c] == NUMERIC) {
		c = getchar();
		charval = (c - '0');
		num = num * 10 + charval;
	}
	tok->tokentype = NUMBERTOK;
	tok->datatype = INTEGER;
	tok->intval = num;
	return (tok);
}

